@page "/users/edit/{UserId:guid}"
@page "/users/create"

@rendermode InteractiveServer

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using HromadaWEB.Models.DTOs

<div class="container">
    <div class="card">
        <h4>@(_isEditing ? "Редагування користувача" : "Створення користувача")</h4>

        <label>Ім'я</label>
        <input type="text" @bind="User.Username" required />

        <label>Email</label>
        <input type="email" @bind="User.Email" required />

        <label>Пароль</label>
        <input type="password" @bind="User.PasswordHash" required />

        <label>Роль</label>
        <select @bind="User.RoleId">
            @foreach (var role in _roles)
            {
                <option value="@role.Id">@role.Name</option>
            }
        </select>

        <label>
            <input type="checkbox" @bind="User.IsBlocked" /> Заблокований
        </label>

        <div class="button-group">
            <button class="primary" @onclick="SaveUser">Зберегти</button>
            <button class="secondary" @onclick="Cancel">Скасувати</button>
        </div>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="error">@ErrorMessage</div>
        }
    </div>
</div>

@code {
    [Parameter] public Guid? UserId { get; set; }
    private UserDto User = new();
    private List<RoleDto> _roles = new();
    private string ErrorMessage = "";
    private bool tokenLoaded = false;
    private bool _isEditing => UserId.HasValue;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !tokenLoaded)
        {
            await LoadRoles();
            await LoadUser();
        }
    }

    private async Task LoadRoles()
    {
        try
        {
            var token = await GetAuthTokenAsync();
            if (string.IsNullOrEmpty(token)) return;

            var response = await Http.GetFromJsonAsync<List<RoleDto>>("https://localhost:7358/api/Role/roles");
            if (response != null)
            {
                _roles = response;
            }
            else
            {
                ErrorMessage = "Не вдалося отримати ролі.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Сталася помилка: {ex.Message}";
        }
    }

    private async Task LoadUser()
    {
        if (UserId.HasValue)
        {
            try
            {
                var token = await GetAuthTokenAsync();
                if (string.IsNullOrEmpty(token)) return;

                var response = await Http.GetFromJsonAsync<UserDto>($"https://localhost:7358/api/users/{UserId.Value}");
                if (response != null)
                {
                    User = response;
                }
                else
                {
                    ErrorMessage = "Не вдалося отримати користувача.";
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Сталася помилка: {ex.Message}";
            }
        }

        tokenLoaded = true;
        StateHasChanged();
    }

    private async Task SaveUser()
    {
        try
        {
            var token = await GetAuthTokenAsync();
            if (string.IsNullOrEmpty(token)) return;

            HttpResponseMessage response;

            // Перевірка, чи користувач редагується чи створюється
            if (_isEditing)
            {
                var updateUserDto = new UserDto
                    {
                        Id = User.Id,
                        Username = User.Username,
                        Email = User.Email,
                        PasswordHash = User.PasswordHash,
                        RoleId = User.RoleId, // передаємо RoleId при редагуванні користувача
                        IsBlocked = User.IsBlocked
                    };

                // Оновлення користувача
                response = await Http.PutAsJsonAsync($"https://localhost:7358/api/users/{User.Id}", updateUserDto);
            }
            else
            {
                // Якщо створюємо нового користувача
                var registrationDto = new RegistrationDto
                    {
                        Username = User.Username,
                        Email = User.Email,
                        Password = User.PasswordHash,
                        ConfirmPassword = User.PasswordHash,
                        RoleId = User.RoleId
                    };

                // Реєстрація нового користувача
                response = await Http.PostAsJsonAsync("https://localhost:7358/api/Auth/register", registrationDto);
            }

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/users");
            }
            else
            {
                ErrorMessage = "Помилка: " + await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Сталася помилка: {ex.Message}";
        }
    }


    private void Cancel() => Navigation.NavigateTo("/users");

    private async Task<string> GetAuthTokenAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        return token?.Trim('"') ?? "";
    }
}
