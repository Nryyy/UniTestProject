@page "/users"
@rendermode InteractiveServer

@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Net.Http.Json
@using System.Net.Http.Headers

<div class="container">
    <div class="card">
        <div class="card-header">
            <h4>Список користувачів</h4>
            <button class="add-btn" @onclick="CreateUser">Додати користувача</button>
        </div>

        <table class="users-table">
            <thead>
                <tr>
                    <th>Ім'я</th>
                    <th>Email</th>
                    <th>Роль</th>
                    <th>Заблокований</th>
                    <th class="actions-column">Дії</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in _users)
                {
                    <tr>
                        <td>@user.Username</td>
                        <td>@user.Email</td>
                        <td>@user.Role?.Name</td>
                        <td class="status">@(user.IsBlocked ? "Так" : "Ні")</td>
                        <td class="actions">
                            <button class="edit-btn" @onclick="() => EditUser(user.Id)">✏️</button>
                            <button class="delete-btn" @onclick="() => DeleteUser(user.Id)">🗑️</button>
                            <button class="block-btn" @onclick="() => ToggleBlockUser(user)">@(user.IsBlocked ? "🔓" : "🔒")</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

    </div>
</div>

@code {
    private List<UserDto> _users = new();
    private bool tokenLoaded = false;
    private string errorMessage = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !tokenLoaded)
        {
            await LoadUsers();
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            token = token?.Trim('"') ?? "";

            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/access-denied");
                return;
            }

            var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7358/api/users/all_users");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                _users = await response.Content.ReadFromJsonAsync<List<UserDto>>() ?? new List<UserDto>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized || response.StatusCode == System.Net.HttpStatusCode.Forbidden)
            {
                Navigation.NavigateTo("/access-denied");
            }
            else
            {
                errorMessage = "Не вдалося отримати користувачів.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Сталася помилка: {ex.Message}";
        }

        tokenLoaded = true;
        StateHasChanged();
    }


    private void CreateUser() => Navigation.NavigateTo("/users/create");
    private void EditUser(Guid id) => Navigation.NavigateTo($"/users/edit/{id}");

    private async Task DeleteUser(Guid id)
    {
        await ExecuteApiRequest(
            async () => await Http.DeleteAsync($"api/users/{id}"),
            () => _users.RemoveAll(u => u.Id == id),
            "Не вдалося видалити користувача."
        );
    }

    private async Task ToggleBlockUser(UserDto user)
    {
        user.IsBlocked = !user.IsBlocked;
        await ExecuteApiRequest(
            async () => await Http.PutAsJsonAsync($"api/users/{user.Id}", user),
            () => { },
            "Не вдалося змінити статус блокування."
        );
    }

    private async Task ExecuteApiRequest(Func<Task<HttpResponseMessage>> apiRequest, Action onSuccess, string errorMessage)
    {
        try
        {
            var response = await apiRequest();
            if (response.IsSuccessStatusCode)
            {
                onSuccess();
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                this.errorMessage = errorMessage;
            }
        }
        catch (Exception ex)
        {
            this.errorMessage = $"Сталася помилка: {ex.Message}";
        }
    }
}