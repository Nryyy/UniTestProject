@page "/templates/edit/{id:guid}"

@rendermode InteractiveServer

@using HromadaWEB.Models.DTOs.Templates
@using HromadaWEB.Models.Entities
@using System.Net.Http.Json
@using Radzen
@using Radzen.Blazor

<h3 class="title">Редагування шаблону</h3>

<div class="form-container">
    <RadzenTextBox @bind-Value="template.Name" Style="width: 100%; margin-bottom: 15px;" Placeholder="Назва шаблону" class="input-field" />
    <RadzenHtmlEditor @bind-Value="template.Description" Style="width: 100%; margin-bottom: 20px;" Placeholder="Опис" class="input-field" />
</div>

<RadzenButton Click="HandleSubmit" Text="Зберегти" Icon="save" Class="submit-btn" Style="width: 100%; margin-bottom: 30px;" />

<h3 class="title">Додати індикатор</h3>
<RadzenButton Click="ToggleIndicatorForm" Text="Додати індикатор" Icon="add_circle" Class="add-indicator-btn" Style="margin-bottom: 20px;" />

@if (showIndicatorForm)
{
    <div class="indicator-form-container">
        <RadzenDropDown Data="@evaluationDirections" TextProperty="Name" ValueProperty="Id" @bind-Value="newIndicator.DirectionId" Style="width: 100%; margin-bottom: 15px;" Placeholder="Критерій оцінювання" />

        <RadzenButton Click="ToggleDirectionForm" Text="➕ Додати напрям" Icon="add" Class="add-btn" Style="margin-bottom: 15px;" />

        @if (showDirectionForm)
        {
            <RadzenTextBox @bind-Value="newDirection.Name" Style="width: 100%; margin-bottom: 15px;" Placeholder="Назва напряму" class="input-field" />
            <RadzenNumeric @bind-Value="newDirection.Weight" Style="width: 100%; margin-bottom: 20px;" Placeholder="Вага" class="input-field" />
            <RadzenButton Click="AddEvaluationDirection" Text="Додати напрям" Icon="save" Class="submit-btn" Style="width: 100%;" />
        }

        <RadzenTextBox @bind-Value="newIndicator.Code" Style="width: 100%; margin-bottom: 15px;" Placeholder="Код" class="input-field" />
        <RadzenTextBox @bind-Value="newIndicator.Name" Style="width: 100%; margin-bottom: 15px;" Placeholder="Назва" class="input-field" />
        <RadzenNumeric @bind-Value="newIndicator.MaxScore" Style="width: 100%; margin-bottom: 20px;" Placeholder="Максимальний бал" class="input-field" />

        <RadzenButton Click="AddIndicator" Text="Додати індикатор" Icon="add" Class="submit-btn" Style="width: 100%;" />
    </div>
}

<h3 class="title">Список індикаторів</h3>
<ul class="indicator-list">
    @foreach (var indicator in indicators)
    {
        <li class="indicator-item">
            <div class="indicator-details">
                <div><strong>Код:</strong> @indicator.Code</div>
                <div><strong>Назва:</strong> @indicator.Name</div>
                <div><strong>Максимальний бал:</strong> @indicator.MaxScore</div>
                <div><strong>Напрям:</strong> @GetDirectionName(indicator.DirectionId)</div>
                <div><strong>Вага напряму:</strong> @GetDirectionWeight(indicator.DirectionId)</div>
            </div>
        </li>
    }
</ul>

@code {
    [Parameter] public Guid Id { get; set; }

    private TemplateModel template = new();
    private IndicatorModel newIndicator = new();
    private List<Indicator> indicators = new();
    private List<EvaluationDirection> evaluationDirections = new();
    private bool showIndicatorForm = false;
    private bool showDirectionForm = false;
    private EvaluationDirectionModel newDirection = new();

    [Inject] private HttpClient Http { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplate();
        await LoadEvaluationDirections();
        await LoadIndicators();  // Завантажуємо індикатори
    }

    private async Task LoadTemplate()
    {
        try
        {
            template = await Http.GetFromJsonAsync<TemplateModel>($"api/Template/{Id}");
            newIndicator.TemplateId = Id;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading template: {ex.Message}");
        }
    }

    private async Task LoadEvaluationDirections()
    {
        try
        {
            evaluationDirections = await Http.GetFromJsonAsync<List<EvaluationDirection>>("api/EvaluationDirection");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading evaluation directions: {ex.Message}");
        }
    }

    private async Task LoadIndicators()
    {
        try
        {
            var allIndicators = await Http.GetFromJsonAsync<List<Indicator>>("https://localhost:7358/api/Indicator");
            indicators = allIndicators.Where(i => i.TemplateId == Id).ToList(); // Фільтруємо за TemplateId
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading indicators: {ex.Message}");
        }
    }


    private async Task HandleSubmit()
    {
        try
        {
            var templateEntity = new Template
                {
                    Id = Id,
                    Title = template.Name,
                    Description = template.Description
                };

            await Http.PutAsJsonAsync($"api/Template/{Id}", templateEntity);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating template: {ex.Message}");
        }
    }

    private async Task AddIndicator()
    {
        try
        {
            var indicator = new Indicator
                {
                    Id = Guid.NewGuid(),
                    TemplateId = newIndicator.TemplateId,
                    DirectionId = newIndicator.DirectionId,
                    Code = newIndicator.Code,
                    Name = newIndicator.Name,
                    MaxScore = newIndicator.MaxScore
                };

            await Http.PostAsJsonAsync("api/Indicator", indicator);
            indicators.Add(indicator);
            showIndicatorForm = false;
            ClearIndicatorForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding indicator: {ex.Message}");
        }
    }

    private async Task AddEvaluationDirection()
    {
        try
        {
            var direction = new EvaluationDirection
                {
                    Id = Guid.NewGuid(),
                    Name = newDirection.Name,
                    Weight = newDirection.Weight
                };

            await Http.PostAsJsonAsync("api/EvaluationDirection", direction);
            evaluationDirections.Add(direction);
            showDirectionForm = false;
            ClearDirectionForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding evaluation direction: {ex.Message}");
        }
    }

    private string GetDirectionWeight(Guid directionId)
    {
        var direction = evaluationDirections.FirstOrDefault(d => d.Id == directionId);
        return direction != null ? direction.Weight.ToString() : "Не знайдено вагу";
    }

    private string GetDirectionName(Guid directionId)
    {
        var direction = evaluationDirections.FirstOrDefault(d => d.Id == directionId);
        return direction?.Name ?? "Не знайдено напрям";
    }

    private void ToggleIndicatorForm() => showIndicatorForm = !showIndicatorForm;
    private void ToggleDirectionForm() => showDirectionForm = !showDirectionForm;

    private void ClearIndicatorForm()
    {
        newIndicator = new IndicatorModel();
    }

    private void ClearDirectionForm()
    {
        newDirection = new EvaluationDirectionModel();
    }

    public class TemplateModel
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }

    public class IndicatorModel
    {
        public Guid TemplateId { get; set; }
        public Guid DirectionId { get; set; }
        public string Code { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public decimal MaxScore { get; set; }
    }

    public class EvaluationDirectionModel
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public string Name { get; set; } = string.Empty;
        public decimal Weight { get; set; }
    }
}
