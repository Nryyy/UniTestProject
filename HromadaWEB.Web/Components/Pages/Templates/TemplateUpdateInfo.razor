@page "/templates/edit/{id:guid}"

@rendermode InteractiveServer

@using HromadaWEB.Models.DTOs.Templates
@using HromadaWEB.Models.Entities
@using System.Net.Http.Json
@using Radzen
@using Radzen.Blazor

<h3 class="title">Редагування шаблону</h3>

<div class="form-container">
    <label>Назва шаблону:</label>
    <RadzenTextBox @bind-Value="template.Title" Style="width: 100%; margin-bottom: 15px;" class="input-field" />

    <label>Опис:</label>
    <RadzenHtmlEditor @bind-Value="template.Description" Style="width: 100%; margin-bottom: 20px;" class="input-field" />
</div>

<RadzenButton Click="HandleSubmit" Text="Зберегти" Icon="save" Class="submit-btn" Style="width: 100%; margin-bottom: 30px;" />

<h3 class="title">Додати індикатор</h3>
<RadzenButton Click="ToggleIndicatorForm" Text="Додати індикатор" Icon="add_circle" Class="add-indicator-btn" Style="margin-bottom: 20px;" />

@if (showIndicatorForm)
{
    <div class="indicator-form-container">
        <label>Критерій оцінювання:</label>
        <RadzenDropDown Data="@evaluationDirections" TextProperty="Name" ValueProperty="Id" @bind-Value="newIndicator.DirectionId" Style="width: 100%; margin-bottom: 15px;" />
        <RadzenButton Click="ToggleEvaluationForm" Text="Додати критерій оцінювання" Icon="add" Class="add-direction-btn" Style="margin-bottom: 15px;" />

        @if (showEvaluationForm)
        {
            <div class="evaluation-form-container">
                <h3 class="title">Додати напрям оцінювання</h3>
                <label>Назва напряму:</label>
                <RadzenTextBox @bind-Value="newEvaluationDirection.Name" Style="width: 100%; margin-bottom: 15px;" class="input-field" />

                <label>Вага:</label>
                <RadzenNumeric @bind-Value="newEvaluationDirection.Weight" Style="width: 100%; margin-bottom: 20px;" class="input-field" />

                <RadzenButton Click="AddEvaluationDirection" Text="Додати" Icon="add" Class="submit-btn" Style="width: 100%;" />
            </div>
        }

		<br />
        <label>Код:</label>
        <RadzenTextBox @bind-Value="newIndicator.Code" Style="width: 100%; margin-bottom: 15px;" class="input-field" />

        <label>Назва:</label>
        <RadzenTextBox @bind-Value="newIndicator.Name" Style="width: 100%; margin-bottom: 15px;" class="input-field" />

        <label>Підстава:</label>
        <RadzenTextBox @bind-Value="newIndicator.Background" Style="width: 100%; margin-bottom: 15px;" class="input-field" />

        <label>Джерело:</label>
        <RadzenTextBox @bind-Value="newIndicator.Source" Style="width: 100%; margin-bottom: 15px;" class="input-field" />

        <label>Максимальний бал:</label>
        <RadzenNumeric @bind-Value="newIndicator.MaxScore" Style="width: 100%; margin-bottom: 20px;" class="input-field" />

        <RadzenButton Click="AddIndicator" Text="Додати індикатор" Icon="add" Class="submit-btn" Style="width: 100%;" />
    </div>
}

<h3 class="title">Список індикаторів</h3>
<ul class="indicator-list">
    @foreach (var indicator in indicators)
    {
        <li class="indicator-item">
            <div class="indicator-details">
                <div><strong>Код:</strong> @indicator.Code</div>
                <div><strong>Назва:</strong> @indicator.Name</div>
                <div><strong>Підстава:</strong> @indicator.Background</div>
                <div><strong>Джерело:</strong> @indicator.Source</div>
                <div><strong>Максимальний бал:</strong> @indicator.MaxScore</div>
                <div><strong>Напрям:</strong> @GetDirection(indicator.DirectionId)?.Name</div>
                <div><strong>Вага:</strong> @GetDirection(indicator.DirectionId)?.Weight</div>
            </div>
            <RadzenButton Click="() => EditIndicator(indicator)" Text="Редагувати" Icon="edit" Class="edit-btn" />
            <RadzenButton Click="() => DeleteIndicator(indicator.Id)" Text="Видалити" Icon="delete" Class="delete-btn" Style="margin-left: 10px;" />
        </li>
    }
</ul>

@code {
    [Parameter] public Guid Id { get; set; }

    private TemplateModel template = new();
    private IndicatorModel newIndicator = new();
    private Indicator selectedIndicator = null;
    private EvaluationDirection newEvaluationDirection = new();
    private List<Indicator> indicators = new();
    private List<EvaluationDirection> evaluationDirections = new();
    private bool showIndicatorForm = false;
    private bool showEvaluationForm = false;

    [Inject] private HttpClient Http { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplate();
        await LoadEvaluationDirections();
        await LoadIndicators();
    }

    private async Task LoadTemplate()
    {
        template = await Http.GetFromJsonAsync<TemplateModel>($"api/Template/{Id}");
        newIndicator.TemplateId = Id;
    }

    private async Task LoadEvaluationDirections()
    {
        evaluationDirections = await Http.GetFromJsonAsync<List<EvaluationDirection>>("api/EvaluationDirection");
    }

    private async Task LoadIndicators()
    {
        var allIndicators = await Http.GetFromJsonAsync<List<Indicator>>("api/Indicator");
        indicators = allIndicators.Where(i => i.TemplateId == Id).ToList();
    }

    private async Task HandleSubmit()
    {
        var templateEntity = new Template
            {
                Id = Id,
                Title = template.Title,
                Description = template.Description
            };

        await Http.PutAsJsonAsync($"api/Template/{Id}", templateEntity);
    }

    private async Task AddIndicator()
    {
        if (selectedIndicator != null)
        {
            selectedIndicator.DirectionId = newIndicator.DirectionId;
            selectedIndicator.Code = newIndicator.Code;
            selectedIndicator.Name = newIndicator.Name;
            selectedIndicator.Background = newIndicator.Background;
            selectedIndicator.Source = newIndicator.Source;
            selectedIndicator.MaxScore = newIndicator.MaxScore;

            await Http.PutAsJsonAsync($"api/Indicator/{selectedIndicator.Id}", selectedIndicator);
            selectedIndicator = null;
        }
        else
        {
            var indicator = new Indicator
                {
                    Id = Guid.NewGuid(),
                    TemplateId = newIndicator.TemplateId,
                    DirectionId = newIndicator.DirectionId,
                    Code = newIndicator.Code,
                    Name = newIndicator.Name,
                    Background = newIndicator.Background,
                    Source = newIndicator.Source,
                    MaxScore = newIndicator.MaxScore
                };

            await Http.PostAsJsonAsync("api/Indicator", indicator);
            indicators.Add(indicator);
        }

        showIndicatorForm = false;
        newIndicator = new IndicatorModel();
    }

    private async Task AddEvaluationDirection()
    {
        var direction = new EvaluationDirection
            {
                Id = Guid.NewGuid(),
                Name = newEvaluationDirection.Name,
                Weight = newEvaluationDirection.Weight
            };

        await Http.PostAsJsonAsync("api/EvaluationDirection", direction);
        evaluationDirections.Add(direction);
        showEvaluationForm = false;
        newEvaluationDirection = new EvaluationDirection();
    }

    private async Task DeleteIndicator(Guid indicatorId)
    {
        await Http.DeleteAsync($"api/Indicator/{indicatorId}");
        indicators.RemoveAll(i => i.Id == indicatorId);
    }

    private void EditIndicator(Indicator indicator)
    {
        selectedIndicator = indicator;
        newIndicator = new IndicatorModel
            {
                TemplateId = indicator.TemplateId,
                DirectionId = indicator.DirectionId,
                Code = indicator.Code,
                Name = indicator.Name,
                Background = indicator.Background,
                Source = indicator.Source,
                MaxScore = indicator.MaxScore
            };
        showIndicatorForm = true;
    }

    private EvaluationDirection GetDirection(Guid directionId)
    {
        return evaluationDirections.FirstOrDefault(d => d.Id == directionId);
    }

    private void ToggleIndicatorForm() => showIndicatorForm = !showIndicatorForm;
    private void ToggleEvaluationForm() => showEvaluationForm = !showEvaluationForm;

    private class IndicatorModel
    {
        public Guid TemplateId { get; set; }
        public Guid DirectionId { get; set; }
        public string Code { get; set; }
        public string Name { get; set; }
        public string Background { get; set; }
        public string Source { get; set; }
        public decimal MaxScore { get; set; }
    }

    private class TemplateModel
    {
        public Guid Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
    }
}
