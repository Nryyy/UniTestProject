@page "/templates/create"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager

@using HromadaWEB.Models.DTOs.Templates
@using HromadaWEB.Models.Entities
@using System.Net.Http.Json
@using System.IdentityModel.Tokens.Jwt
@using Radzen
@using Radzen.Blazor
@using System.Linq

<h3 class="title">Створення шаблону</h3>

<EditForm Model="newTemplate" OnValidSubmit="HandleSubmit" class="form-container">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label class="input-label">Назва шаблону:</label>
		<RadzenTextBox @bind-Value="newTemplate.Name" class="input-field" />
    </div>

    <div class="form-group">
        <label class="input-label">Опис:</label>
		<RadzenHtmlEditor @bind-Value="newTemplate.Description" class="input-field" />
    </div>

    <RadzenButton Shade="Shade.Darker" Text="Зберегти" ButtonStyle="ButtonStyle.Secondary" Style="margin: 10px;" ButtonType="ButtonType.Submit"></RadzenButton>
</EditForm>

@code {
    private TemplateModel newTemplate = new();
    private Guid userId = Guid.Empty;

    [Inject]
    private HttpClient Http { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Retrieve the JWT token from session storage and extract the user ID
            var token = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            if (!string.IsNullOrEmpty(token))
            {
                var handler = new JwtSecurityTokenHandler();
                var jsonToken = handler.ReadToken(token) as JwtSecurityToken;
                if (jsonToken != null)
                {
                    // Ensure that the userId is properly parsed as a Guid
                    var userIdString = jsonToken.Claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;
                if (!string.IsNullOrEmpty(userIdString) && Guid.TryParse(userIdString, out Guid parsedUserId))
                    {
                        userId = parsedUserId;
                    }
                }
            }
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            var template = new Template
                {
                    Title = newTemplate.Name,
                    Description = newTemplate.Description,
                    CreatedById = userId // Add the userId to the template as a Guid
                };

            var response = await Http.PostAsJsonAsync("api/Template", template);
            if (response.IsSuccessStatusCode)
            {
				NavigationManager.NavigateTo("/templates");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private class TemplateModel
    {
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }
}
