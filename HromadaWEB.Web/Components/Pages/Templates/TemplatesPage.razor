@page "/templates"

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

@rendermode InteractiveServer

@using HromadaWEB.Models.DTOs.Templates
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims

<PageTitle>Шаблони</PageTitle>

<style>
    .container {
        max-width: 1200px;
        margin: auto;
        padding: 20px;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .template-card {
        background: #ffffff;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

        .template-card:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
        }
</style>

<div class="container">
    <div class="header">
        <h1 class="text-2xl font-bold text-gray-900">Шаблони</h1>
        @if (UserRole != "Hromada")
        {
            <RadzenButton Text="Створити" Click="@CreateTemplate" Style="margin-left: 10px;" />
        }
    </div>

    @if (Templates is null)
    {
        <p>Завантаження шаблонів...</p>
    }
    else if (Templates.Count == 0)
    {
        <p class="text-gray-500">Немає доступних шаблонів.</p>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var template in Templates)
            {
                <div class="template-card">
                    <h2 class="text-lg font-semibold text-gray-900">@template.Title</h2>
                    <span>@((MarkupString)template.Description)</span>
                    <div class="flex justify-between items-center mt-4">
                        <span class="text-sm text-gray-500">Дата стоврення: @template.CreatedAt.ToShortDateString()</span>
                        <div class="template-buttons">
                            @if (UserRole != "Hromada")
                            {
                                <RadzenButton Text="Редагувати шаблон" Click="@(() => EditTemplate(template.Id))" />
                                <RadzenButton Text="Подивитися відповіді" Click="@(() => ViewResponses(template.Id))" />
                                <RadzenButton Text="Видалити" Click="@(() => DeleteTemplate(template.Id))" />
                            }
                            else if (UserRole == "Hromada")
                            {
                                <RadzenButton Text="Пройти опитування" Click="@( () => TakeSurvey(template.Id))" Style="margin-bottom: 20px;" />
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<TemplateDto> Templates = new();
    private string UserRole = "";
    private bool _isInitialized;

    protected override async Task OnInitializedAsync()
    {
        Templates = await Http.GetFromJsonAsync<List<TemplateDto>>("https://localhost:7358/api/Template/all_templates");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadUserRole();
            _isInitialized = true;
            StateHasChanged(); // Оновлюємо інтерфейс після отримання ролі
        }
    }

    private async Task LoadUserRole()
    {
        var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        if (!string.IsNullOrEmpty(token))
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
            UserRole = roleClaim?.Value ?? "";
        }
    }


    private void CreateTemplate()
    {
        Navigation.NavigateTo("/templates/create");
    }

    private void EditTemplate(Guid id)
    {
        Navigation.NavigateTo($"/templates/edit/{id}");
    }

    private void ViewResponses(Guid id)
    {
        Navigation.NavigateTo($"/templates/responses/{id}");
    }

    private void DeleteTemplate(Guid id)
    {
        // Implement delete logic
    }

    private void TakeSurvey(Guid id)
    {
        Navigation.NavigateTo($"/survey/{id}");
    }
}
