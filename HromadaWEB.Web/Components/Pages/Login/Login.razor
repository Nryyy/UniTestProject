@page "/login"

@using HromadaWEB.Models.DTOs
@using HromadaWEB.Web
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Net.Http.Json
@using Blazored.LocalStorage
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
<PageTitle>Login</PageTitle>

<EditForm Model="@loginDto" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="loginDto.Email" />
        <ValidationMessage For="@(() => loginDto.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" @bind-Value="loginDto.Password" type="password" />
        <ValidationMessage For="@(() => loginDto.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@if (loginError != null)
{
    <div class="alert alert-danger mt-3">
        @loginError
    </div>
}

@code {
    private LoginDto loginDto = new LoginDto();
    private string? loginError;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7358/api/Auth/login", loginDto);

            if (response.IsSuccessStatusCode)
            {
                var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();
                if (authResponse is not null && !string.IsNullOrEmpty(authResponse.Token))
                {
                    // Зберігаємо токен у sessionStorage
                    await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "authToken", authResponse.Token);

                    // Оновлюємо стан аутентифікації
                    if (AuthenticationStateProvider is ApiAuthenticationStateProvider customAuthProvider)
                    {
                        await customAuthProvider.MarkUserAsAuthenticated(authResponse.Token);
                    }

                    // Перехід на головну сторінку
                    Navigation.NavigateTo("/users");
                }
                else
                {
                    loginError = "Невірна відповідь від сервера.";
                }
            }
            else
            {
                var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                loginError = errorResponse?.Message ?? "Login failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            loginError = "An error occurred during login: " + ex.Message;
        }
    }

    public class ErrorResponse
    {
        public string Message { get; set; }
    }
}
