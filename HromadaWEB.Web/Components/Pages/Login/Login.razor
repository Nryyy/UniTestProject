@page "/login"

@using HromadaWEB.Models.DTOs
@using HromadaWEB.Web
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Net.Http.Json
@using Blazored.LocalStorage
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
<PageTitle>Login</PageTitle>

<style>
    /* Основні стилі для сторінки входу */
    html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        font-family: 'Arial', sans-serif;
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        overflow-x: hidden;
    }

    .sidebar {
        display: none;
    }

    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    .login-card {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 30px;
        width: 100%;
        max-width: 450px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        border: 1px solid #dee2e6;
    }

    .login-title {
        text-align: center;
        font-size: 24px;
        margin-bottom: 20px;
        color: #007bff;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            font-weight: bold;
            color: #495057;
        }

    .form-control {
        border-radius: 8px;
        border: 1px solid #ced4da;
        padding: 10px;
        width: 100%;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }

        .form-control:focus {
            border-color: #007bff;
            outline: none;
        }

    .btn-submit {
        width: 100%;
        padding: 12px;
        font-size: 1.1rem;
        font-weight: bold;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .btn-submit {
        background-color: #007bff;
        color: white;
    }

        .btn-submit:hover {
            background-color: #0056b3;
        }

    .alert {
        margin-top: 20px;
        padding: 15px;
        background-color: #f8d7da;
        color: #721c24;
        border-radius: 5px;
    }
</style>

<div class="login-container">
    <div class="login-card">
        <h2 class="login-title">Вхід</h2>
        <EditForm Model="@loginDto" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Електронна адреса</label>
                <InputText id="email" class="form-control" @bind-Value="loginDto.Email" />
                <ValidationMessage For="@(() => loginDto.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Пароль</label>
                <InputText id="password" class="form-control" @bind-Value="loginDto.Password" type="password" />
                <ValidationMessage For="@(() => loginDto.Password)" />
            </div>

            <button type="submit" class="btn-submit">Увійти</button>
        </EditForm>

        @if (loginError != null)
        {
            <div class="alert">
                @loginError
            </div>
        }
    </div>
</div>

@code {
    private LoginDto loginDto = new LoginDto();
    private string? loginError;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7358/api/Auth/login", loginDto);

            if (response.IsSuccessStatusCode)
            {
                var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();
                if (authResponse is not null && !string.IsNullOrEmpty(authResponse.Token))
                {
                    // Зберігаємо токен у sessionStorage
                    await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "authToken", authResponse.Token);

                    // Оновлюємо стан аутентифікації
                    if (AuthenticationStateProvider is ApiAuthenticationStateProvider customAuthProvider)
                    {
                        await customAuthProvider.MarkUserAsAuthenticated(authResponse.Token);
                    }

                    // Перехід на головну сторінку
                    Navigation.NavigateTo("/dashboard");
                }
                else
                {
                    loginError = "Невірна відповідь від сервера.";
                }
            }
            else
            {
                var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                loginError = errorResponse?.Message ?? "Вхід не вдалося виконати. Спробуйте ще раз.";
            }
        }
        catch (Exception ex)
        {
            loginError = "Сталася помилка під час входу: " + ex.Message;
        }
    }

    public class ErrorResponse
    {
        public string Message { get; set; }
    }
}
