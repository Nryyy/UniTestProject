@page "/register"

@inject HttpClient Http
@inject NavigationManager Navigation
@using HromadaWEB.Models.DTOs
@using Microsoft.AspNetCore.Components.Forms
@rendermode InteractiveServer

<PageTitle>Register</PageTitle>

<style>
    .sidebar {
        display: none;
    }
</style>

<EditForm Model="@registrationDto" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="registrationDto.Username" />
        <ValidationMessage For="@(() => registrationDto.Username)" />
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registrationDto.Email" />
        <ValidationMessage For="@(() => registrationDto.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" @bind-Value="registrationDto.Password" type="password" />
        <ValidationMessage For="@(() => registrationDto.Password)" />
    </div>

    <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" class="form-control" @bind-Value="registrationDto.ConfirmPassword" type="password" />
        <ValidationMessage For="@(() => registrationDto.ConfirmPassword)" />
    </div>

    <div class="form-group">
        <label>Register as:</label>
        <div>
            <InputRadioGroup @bind-Value="registrationDto.IsCommunity">
                <InputRadio class="form-check-input" id="community" Value="true" />
                <label class="form-check-label" for="community">Я реєструюсь від імені територіальної громади</label>
                <InputRadio class="form-check-input" id="controller" Value="false" />
                <label class="form-check-label" for="controller">Я контролюючий орган</label>
            </InputRadioGroup>
        </div>
    </div>

    @if (registrationDto.IsCommunity)
    {
        <div class="form-group">
            <label for="communityName">Community Name</label>
            <InputText id="communityName" class="form-control" @bind-Value="registrationDto.CommunityName" />
            <ValidationMessage For="@(() => registrationDto.CommunityName)" />
        </div>

        <div class="form-group">
            <label for="region">Region</label>
            <InputText id="region" class="form-control" @bind-Value="registrationDto.Region" />
            <ValidationMessage For="@(() => registrationDto.Region)" />
        </div>
    }

    <button type="submit" class="btn btn-primary" disabled="@(!isPasswordValid)">Register</button>
</EditForm>

@if (registrationError != null)
{
    <div class="alert alert-danger mt-3">
        @registrationError
    </div>
}

@code {
    private RegistrationDto registrationDto = new RegistrationDto();
    private string? registrationError;
    private bool isPasswordValid => registrationDto.Password == registrationDto.ConfirmPassword;

    private async Task HandleRegistration()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7358/api/Auth/register", registrationDto);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                registrationError = errorResponse ?? "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            registrationError = "An error occurred during registration: " + ex.Message;
        }
    }
}